" 管理兼容模式
set nocompatible

" 设置历史记录数
set history=10000

set clipboard=unnamedplus

set autoread

" 显示相关
set cul

" 缩进相关
set autoindent
set cindent

" 设置Tab宽度
set tabstop=4
set shiftwidth=4 
" 使用空格代替制表符
set expandtab
" 在行开始的地方使用制表符
set smarttab
" 显示行数
set number
set numberwidth=4

" 显示相对行号
set relativenumber

" 搜索逐字符高亮
set hlsearch
set incsearch
set ignorecase
set smartcase

" 语言设置
set langmenu=zh_CN.UTF-8
let &termencoding=&encoding
set fileencodings=utf-8,gbk,ucs-bom,cp936
set helplang=cn
let g:python_host_prog='/usr/bin/python2'
let g:python3_host_prog='/usr/bin/python3'
" 总是显示状态行
set cmdheight=2

set showcmd
set wildmenu
set wildignore=*.o,*.obj,*.dll,*.exe,*~,*.pyc

" 长于窗口长度自动换行
set wrap

" 保留10行的滚动区间
set scrolloff=10

" 关闭备份
set nobackup
set nowritebackup
set noswapfile

"键盘命令
" leader 键
let g:mapleader=","
inoremap jj <esc>`^
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

nmap <leader>w :w!<CR>
nmap <leader>f :find<CR>
vmap <leader>c "+y
nmap <leader>v "+gp
imap <leader>v <esc>"+gp

" 映射按键
map S :w<CR>
map Q :q<CR>
map R :source $MYVIMRC<CR>
map <F4> :tabnew .<CR>
nnoremap <leader>g :grep <c-r><c-w> */**<cr>

filetype plugin on

let g:ycm_server_python_interpreter='/usr/bin/python'
let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'
"停止提示是否载入本地 ycm_extra_conf 文件
let g:ycm_confirm_extra_conf = 0
let g:ycm_show_diagnostics_ui = 0 
"停止弹出函数原型
set completeopt=menu,menuone
let g:ycm_add_preview_to_completeopt=0
"在注释输入中也能补全
let g:ycm_complete_in_comments = 1
"在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0
"从2个键入字符开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_min_num_indentifiers_candiate_chars = 2
"禁止缓存匹配项
let g:ycm_cache_omnifunc=0
"语法关键字补全
let g:ycm_seed_identifiers_with_syntax=1
"让YouCompleteMe同时利用原来的ctags
let g:ycm_collect_identifiers_from_tag_files = 1
"设置出发补全快捷键
"let g:ycm_key_invoke_completion='<c-z>'

noremap <c-z> <nop>

let g:ycm_semantic_triggers = {
    \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
    \ 'cs,lua,javascript': ['re!\w{2}'],
    \}

let g:ycm_filetype_whitelist = {
    \ "c":1,
    \ "cpp":1,
    \ "objc":1,
    \ "sh":1,
    \ "zsh":1,
    \ "zimbu":1,
    \ "go":1,
    \}

let g:UltiSnipsExpandTrigger='<c-z>'
let g:UltiSnipsListSnippets='<c-l>'
let g:UltiSnipsJumpForwardTrigger='<c-j>'
let g:UltiSnipsJumpBackwardTrigger='<c-k>'
let g:UlitSnipsEditSplit='vertical'

"跳转到定义处
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> 

" 设置 gutentags 模块
let g:gutentags_modules = ['ctags', 'cscope']
" 设置搜索工程的标志
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']

" 所生成的数据文件名称
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中, 避免目录污染
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

if !isdirectory(s:vim_tags)
    silent! call mkdir (s:vim_tags, 'p')
endif

let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extras=+q']
let g:gutentags_ctags_extra_args = ['--c++-kinds=+pxI']
let g:gutentags_ctags_extra_args = ['--c-kinds=+px']

if has ("cscope")
    " 设置cscope和ctags对ctrl+] :ta和vim -t的兼容
    set cscopetag
    " cscope优先于ctags
    set csto=0
    " 在当前目录添加cscope数据库
    if filereadable("cscope.out")
        cs add cscope.out
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    " 显示信息当其他的cscope数据库被添加
    set cscopeverbose
    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif

call plug#begin('~/.vim/plugged')

Plug 'vim-airline/vim-airline'
Plug 'Valloric/YouCompleteMe', {'on': []}
augroup load_ycm
    autocmd!
    autocmd InsertEnter * call plug#load('YouCompleteMe') | autocmd! load_ycm
augroup END
Plug 'rdnetto/ycm-generator', {'branch': 'stable'}
Plug 'ludovicchabant/vim-gutentags'
Plug 'vim-scripts/taglist.vim'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'editorconfig/editorconfig-vim'
Plug 'sirver/ultisnips' 
Plug 'honza/vim-snippets' 
Plug 'fatih/vim-go', {'do': 'GoUpdateBinaries'}
Plug 'scrooloose/nerdtree' 
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'
Plug 'majutsushi/tagbar'
Plug 'Blackrush/vim-gocode'
Plug 'easymotion/vim-easymotion'

call plug#end()

filetype on

"inoremap " ""<ESC>i
inoremap ' ''<ESC>i

filetype plugin indent on
set completeopt=longest,menu
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
let Tlist_Show_One_File = 1 
let Tlist_Exit_OnlyWindow = 1 
map <silent> <F2> :TlistToggle<CR>

"vim-markdown 配置项
let vim_markdown_toc_autofit = 1
let vim_markdown_follow_anchor = 1

"editorconfig 配置项
let EditorConfig_exclude_patterns = ['fugitive://.\*', 'scp://.\*']

"deoplete 配置项
let g:deoplete#enable_at_startup = 1

" nerdtree 配置项
let NERDTreeWinPos="right"
" 当打开 NERDTree 窗口时, 自动显示 Bookmarks
let NERDTreeShowBookmarks=1

map <F3> :NERDTreeMirror<CR>
map <F3> :NERDTreeToggle<CR>
nmap <F8> :TagbarToggle<CR>
imap <F6> <C-x><C-o>

nnoremap <silent> <Leader>ag :Ack! <C-R><C-W><CR>
nnoremap <silent> <c-p> :Files <CR>
nnoremap <silent> <c-e> :Buffers <CR>
